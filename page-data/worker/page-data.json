{"componentChunkName":"component---src-templates-blog-post-js","path":"/worker/","result":{"data":{"site":{"siteMetadata":{"title":"feiker的小站"}},"markdownRemark":{"id":"fc307ff1-69b0-589a-9d8e-92a130fccd09","excerpt":"worker javascript 是单线程的，意味着任务只能分时排队进行，在进程UI计算的时候，js线程只能等待，不能做其它的事情，web worker的出现是为了支持web多线程运行，在做高负担计算的同时，也不会影响到主线程UI交互的流畅性。 worker…","html":"<h1>worker</h1>\n<p>javascript 是单线程的，意味着任务只能分时排队进行，在进程UI计算的时候，js线程只能等待，不能做其它的事情，web worker的出现是为了支持web多线程运行，在做高负担计算的同时，也不会影响到主线程UI交互的流畅性。</p>\n<p>worker线程可以理解为是主线程的打工小弟，主线程可以把任务派发给worker，worker通过计算之后，把计算的结果回传给主线程。</p>\n<p><img src=\"https://davidea.st/assets/articles/2018-05-31-comlink-simple-web-worker/worker-post-message.gif\"></p>\n<p>相比主线程，worker线程有以下限制</p>\n<ol>\n<li>同源限制，worker 脚本地址需要和主线程脚本同域</li>\n<li>DOM 限制，worker 获取不了除了navigator和location之外的dom对象</li>\n<li>通信限制，worker 线程和主线程不能直接通信，需要通过消息传递完成</li>\n</ol>\n<h3>使用</h3>\n<p>主线程和worker线程通过message进行消息传递</p>\n<p>主线程监听message事件，并向worker传递消息，注意消息可以是string，blob等各种内容</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get message from worker: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>同理，worker 线程监听message事件来获取消息，postMessage发送消息</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[worker] get message'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postMessage to main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"worker 在浏览器中的作用","date":"December 10, 2019","description":"探索worker在浏览器中的功能以及comlink的功能"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/worker/","previous":{"fields":{"slug":"/traceroute/"},"frontmatter":{"title":"traceroute 实现原理"}},"next":{"fields":{"slug":"/git-in-deepth/"},"frontmatter":{"title":"深度理解git"}}}}}